{"version":3,"file":"static/js/8377149145146f.chunk.js","mappings":"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","sources":["webpack://hexo-pro-client/./client/src/pages/content/components/frontMatterAdder.tsx","webpack://hexo-pro-client/./client/src/utils/booleanUtils.ts"],"sourcesContent":["import { Button, Card, Checkbox, Input, Tag, Tooltip, Select, Switch, InputNumber, Space, Divider } from \"antd\"\nimport React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport useDeviceDetect from '../../../hooks/useDeviceDetect'\nimport { formatFrontMatterValue } from \"@/utils/booleanUtils\"\nimport useLocale from \"@/hooks/useLocale\"\n\nconst CheckboxGroup = Checkbox.Group\nconst { Option } = Select\n\nexport function FrontMatterAdder({ visible, onClose, title, existFrontMatter, frontMatter, onChange }) {\n    const { isMobile } = useDeviceDetect()\n    const [localVisible, setLocalVisible] = useState(false)\n    const [inputFmtKeyValue, setInputFmtKeyValue] = useState('')\n    const [inputFmtValueValue, setInputFmtValueValue] = useState('')\n    const [inputValueType, setInputValueType] = useState('string') // 'string', 'boolean', 'number'\n    const [booleanValue, setBooleanValue] = useState(false)\n    const [numberValue, setNumberValue] = useState(0)\n\n    const t = useLocale()\n\n    useEffect(() => {\n        setLocalVisible(visible)\n    }, [visible])\n\n    // 重置输入状态\n    const resetInputState = () => {\n        setInputFmtKeyValue('')\n        setInputFmtValueValue('')\n        setInputValueType('string')\n        setBooleanValue(false)\n        setNumberValue(0)\n    }\n\n    const existFontMatter = () => {\n        const fmkeys = Object.keys(existFrontMatter)\n        const options = []\n\n        fmkeys.forEach((name, i) => {\n            options.push({\n                label: (\n                    <Tooltip key={i} title={formatFrontMatterValue(frontMatter[name])}>\n                        <Tag color={frontMatter[name] === null || frontMatter[name] === undefined ? 'default' : 'blue'} style={{fontSize: '11px', padding: '2px 6px'}}>{name}</Tag>\n                    </Tooltip>\n                ),\n                value: name\n            })\n        })\n\n        return (\n            <CheckboxGroup options={options} defaultValue={fmkeys} onChange={(v) => {\n                const newfmt = {}\n                v.forEach(name => {\n                    // 保持原始值，不进行任何转换\n                    newfmt[name] = !existFrontMatter[name] ? null : existFrontMatter[name]\n                })\n                console.log('newfmt', newfmt)\n                onChange(newfmt)\n            }} />\n        )\n    }\n\n    const onInputEnterKeyPress = () => {\n        if (inputFmtKeyValue.trim().length == 0) {\n            return\n        }\n        \n        const newFmt = { ...frontMatter }\n        \n        // 根据选择的类型设置值\n        switch (inputValueType) {\n            case 'boolean':\n                newFmt[inputFmtKeyValue] = booleanValue\n                break\n            case 'number':\n                newFmt[inputFmtKeyValue] = numberValue\n                break\n            case 'string':\n            default:\n                newFmt[inputFmtKeyValue] = inputFmtValueValue\n                break\n        }\n        \n        onChange(newFmt)\n        resetInputState()\n    }\n\n    // 渲染值输入控件\n    const renderValueInput = () => {\n        switch (inputValueType) {\n            case 'boolean':\n                return (\n                    <div style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        padding: '4px 8px',\n                        border: '1px solid #d9d9d9',\n                        borderRadius: '4px',\n                        backgroundColor: '#fafafa',\n                        minHeight: '28px'\n                    }}>\n                        <span style={{ fontSize: '12px', color: '#666' }}>\n                            {t['frontMatterAdder.input.boolean.value']}:\n                        </span>\n                        <Space size=\"small\">\n                            <Switch \n                                checked={booleanValue} \n                                onChange={setBooleanValue}\n                                size=\"small\"\n                            />\n                            <span style={{ \n                                fontSize: '11px', \n                                color: booleanValue ? '#52c41a' : '#ff4d4f',\n                                fontWeight: 500,\n                                minWidth: '30px'\n                            }}>\n                                {booleanValue ? 'true' : 'false'}\n                            </span>\n                        </Space>\n                    </div>\n                )\n            case 'number':\n                return (\n                    <InputNumber\n                        placeholder={t['frontMatterAdder.input.number.placeholder']}\n                        value={numberValue}\n                        onChange={(value) => setNumberValue(value || 0)}\n                        onPressEnter={onInputEnterKeyPress}\n                        style={{ width: '100%' }}\n                        size=\"small\"\n                        controls={false}\n                    />\n                )\n            case 'string':\n            default:\n                return (\n                    <Input\n                        placeholder={t['frontMatterAdder.input.string.placeholder']}\n                        value={inputFmtValueValue}\n                        onChange={(v) => setInputFmtValueValue(v.target.value)}\n                        onPressEnter={onInputEnterKeyPress}\n                        size=\"small\"\n                    />\n                )\n        }\n    }\n\n    const addFrontMatter = () => {\n        return (\n            <div style={{\n                padding: '12px',\n                backgroundColor: '#fafafa',\n                borderRadius: '4px',\n                border: '1px solid #f0f0f0'\n            }}>\n                {/* 标题 */}\n                <div style={{\n                    marginBottom: '8px',\n                    fontSize: '12px',\n                    fontWeight: 500,\n                    color: '#262626'\n                }}>\n                    {t['frontMatterAdder.title.addNewFrontMatter']}\n                </div>\n\n                {/* 输入区域 */}\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: '8px'\n                }}>\n                    {/* 键名和类型选择 - 横向布局 */}\n                    <div style={{\n                        display: 'flex',\n                        gap: '8px',\n                        alignItems: 'flex-end'\n                    }}>\n                        <div style={{ flex: 2 }}>\n                            <div style={{ \n                                marginBottom: '4px', \n                                fontSize: '11px', \n                                color: '#666'\n                            }}>\n                                {t['frontMatterAdder.field.key.name']}\n                            </div>\n                            <Input\n                                placeholder={t['frontMatterAdder.field.key.placeholder']}\n                                value={inputFmtKeyValue}\n                                onChange={(v) => setInputFmtKeyValue(v.target.value)}\n                                onPressEnter={onInputEnterKeyPress}\n                                status={!inputFmtKeyValue.trim() ? 'error' : undefined}\n                                size=\"small\"\n                            />\n                        </div>\n                        <div style={{ flex: 1 }}>\n                            <div style={{ \n                                marginBottom: '4px', \n                                fontSize: '11px', \n                                color: '#666'\n                            }}>\n                                数据类型\n                            </div>\n                            <Select\n                                value={inputValueType}\n                                onChange={setInputValueType}\n                                style={{ width: '100%' }}\n                                size=\"small\"\n                            >\n                                <Option value=\"string\">📝 {t['frontMatterAdder.input.string.value']}</Option>\n                                <Option value=\"boolean\">🔘 {t['frontMatterAdder.input.boolean.value']}</Option>\n                                <Option value=\"number\">🔢 {t['frontMatterAdder.input.number.value']}</Option>\n                            </Select>\n                        </div>\n                    </div>\n\n                    {/* 值输入 */}\n                    <div>\n                        <div style={{ \n                            marginBottom: '4px', \n                            fontSize: '11px', \n                            color: '#666'\n                        }}>\n                            键值\n                        </div>\n                        {renderValueInput()}\n                    </div>\n\n                    {/* 操作按钮 */}\n                    <div style={{\n                        display: 'flex',\n                        justifyContent: 'flex-end',\n                        alignItems: 'center',\n                        gap: '6px',\n                        marginTop: '4px',\n                        paddingTop: '8px',\n                        borderTop: '1px solid #f0f0f0'\n                    }}>\n                        <Button\n                            type=\"primary\"\n                            onClick={onInputEnterKeyPress}\n                            disabled={!inputFmtKeyValue.trim()}\n                            size=\"small\"\n                        >\n                            {t['frontMatterAdder.button.addFrontMatter']}\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                setLocalVisible(false)\n                                resetInputState()\n                                onClose()\n                            }}\n                            size=\"small\"\n                        >\n                            {t['universal.close']}\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return localVisible ? (\n        <Card\n            title={\n                <div style={{ \n                    fontSize: '14px', \n                    fontWeight: 600,\n                    color: '#262626'\n                }}>\n                    {title}\n                </div>\n            }\n            bordered={true}\n            size=\"small\"\n            style={{\n                position: 'absolute',\n                top: '100%',\n                zIndex: 100,\n                width: isMobile ? '95vw' : '500px',\n                maxWidth: '100vw',\n                left: isMobile ? '2.5vw' : undefined,\n                right: isMobile ? '2.5vw' : undefined,\n                boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\n                borderRadius: '6px',\n                marginTop: '4px'\n            }}\n            bodyStyle={{ \n                padding: isMobile ? '12px' : '16px',\n                maxHeight: '60vh',\n                overflowY: 'auto'\n            }}\n        >\n            {/* 现有 Front Matter 选择区域 */}\n            <div style={{ marginBottom: '12px' }}>\n                <div style={{\n                    marginBottom: '6px',\n                    fontSize: '12px',\n                    fontWeight: 500,\n                    color: '#262626'\n                }}>\n                    {t['frontMatterAdder.title.selectExistingFrontMatter']}\n                </div>\n                <div style={{\n                    padding: '8px',\n                    backgroundColor: '#f8f9fa',\n                    borderRadius: '4px',\n                    border: '1px solid #e9ecef'\n                }}>\n                    {existFontMatter()}\n                </div>\n            </div>\n\n            <Divider style={{ margin: '12px 0' }} />\n\n            {/* 添加新 Front Matter 区域 */}\n            {addFrontMatter()}\n        </Card>\n    ) : null\n}","/**\n * 布尔值转换工具函数\n */\n\n/**\n * 判断一个值是否为布尔类型的字符串\n * @param value 要检查的值\n * @returns 如果是布尔类型字符串返回 true，否则返回 false\n */\nexport function isBooleanString(value: any): boolean {\n    if (typeof value !== 'string') {\n        return false\n    }\n    \n    const lowerValue = value.toLowerCase().trim()\n    const truthy = ['true', 'yes', '1', 'on', 'enabled', 'active']\n    const falsy = ['false', 'no', '0', 'off', 'disabled', 'inactive']\n    \n    return truthy.includes(lowerValue) || falsy.includes(lowerValue)\n}\n\n/**\n * 将布尔类型字符串转换为布尔值\n * @param value 要转换的值\n * @returns 转换后的布尔值，如果不是布尔类型字符串则返回原值\n */\nexport function convertBooleanString(value: any): any {\n    if (!isBooleanString(value)) {\n        return value\n    }\n    \n    const lowerValue = value.toLowerCase().trim()\n    const truthy = ['true', 'yes', '1', 'on', 'enabled', 'active']\n    \n    return truthy.includes(lowerValue)\n}\n\n/**\n * 处理 frontMatter 对象，将其中的布尔类型字符串转换为布尔值\n * @param frontMatter frontMatter 对象\n * @returns 处理后的 frontMatter 对象\n */\nexport function processFrontMatterBooleans(frontMatter: Record<string, any>): Record<string, any> {\n    const processed = {}\n    \n    Object.keys(frontMatter).forEach(key => {\n        processed[key] = convertBooleanString(frontMatter[key])\n    })\n    \n    return processed\n}\n\n/**\n * 格式化 frontMatter 值用于显示\n * @param value frontMatter 的值\n * @returns 格式化后的显示字符串\n */\nexport function formatFrontMatterValue(value: any): string {\n    // 如果值为 null 或 undefined，显示 'unset'\n    if (value === null || value === undefined) {\n        return 'unset'\n    }\n    \n    // 如果值为空字符串，显示 'empty'\n    if (value === '') {\n        return 'empty'\n    }\n    \n    // 如果值为布尔类型，转换为字符串\n    if (typeof value === 'boolean') {\n        return value.toString()\n    }\n    \n    // 其他情况直接转换为字符串\n    return String(value)\n} "],"names":["CheckboxGroup","Checkbox","Group","Option","Select","FrontMatterAdder","_ref","visible","onClose","title","existFrontMatter","frontMatter","onChange","isMobile","useDeviceDetect","_useState2","_slicedToArray","useState","localVisible","setLocalVisible","_useState4","inputFmtKeyValue","setInputFmtKeyValue","_useState6","inputFmtValueValue","setInputFmtValueValue","_useState8","inputValueType","setInputValueType","_useState10","booleanValue","setBooleanValue","_useState12","numberValue","setNumberValue","t","useLocale","useEffect","fmkeys","options","resetInputState","onInputEnterKeyPress","trim","length","newFmt","_objectSpread","React","Card","style","fontSize","fontWeight","color","bordered","size","position","top","zIndex","width","maxWidth","left","undefined","right","boxShadow","borderRadius","marginTop","bodyStyle","padding","maxHeight","overflowY","marginBottom","backgroundColor","border","Object","keys","forEach","name","i","push","label","Tooltip","key","formatFrontMatterValue","Tag","value","defaultValue","v","newfmt","console","log","Divider","margin","display","flexDirection","gap","alignItems","flex","Input","placeholder","target","onPressEnter","status","justifyContent","minHeight","Space","Switch","checked","minWidth","InputNumber","controls","renderValueInput","paddingTop","borderTop","Button","type","onClick","disabled","toString","String"],"sourceRoot":""}