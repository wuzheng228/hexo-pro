{"version":3,"file":"static/js/42386b11e54af.chunk.js","mappings":"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","sources":["webpack://hexo-pro/./client/src/pages/content/components/frontMatterAdder.tsx","webpack://hexo-pro/./client/src/pages/content/posts/post/postSetting.tsx","webpack://hexo-pro/./client/src/pages/content/posts/post/tagAdder.tsx"],"sourcesContent":["import { Button, Card, Checkbox, Input, Space, Tag, Tooltip } from \"antd\"\r\nimport React from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nconst CheckboxGroup = Checkbox.Group\r\n\r\nexport function FrontMatterAdder({ visible, onClose, title, existFrontMatter, frontMatter, onChange }) {\r\n    const [localVisible, setLocalVisible] = useState(false)\r\n    const [inputFmtKeyValue, setInputFmtKeyValue] = useState('')\r\n    const [inputFmtValueValue, setInputFmtValueValue] = useState('')\r\n\r\n    useEffect(() => {\r\n        setLocalVisible(visible)\r\n    }, [visible])\r\n\r\n    const exitsFontMatter = () => {\r\n        const fmkeys = Object.keys(existFrontMatter)\r\n        return (\r\n            <CheckboxGroup onChange={(v) => {\r\n                const newfmt = {}\r\n                v.forEach(name => {\r\n                    newfmt[name] = !exitsFontMatter[name] ? null : exitsFontMatter[name]\r\n                })\r\n                onChange(newfmt)\r\n            }} value={Object.keys(frontMatter)}>\r\n                {\r\n                    fmkeys.map((item, i) => {\r\n                        return (\r\n                            <Checkbox key={item} value={({ checked }) => {\r\n                                return (\r\n                                    <Tooltip key={item} title={!frontMatter[item] ? 'unset' : frontMatter[item]}>\r\n                                        <Tag key={item} color={checked ? 'purple' : ''} style={{ marginBottom: 5 }}>\r\n                                            {item}\r\n                                        </Tag>\r\n                                    </Tooltip>\r\n\r\n                                );\r\n                            }} />\r\n                        );\r\n                    })}\r\n            </CheckboxGroup>\r\n        )\r\n    }\r\n\r\n    const onInputEnterKeyPress = () => {\r\n        if (inputFmtKeyValue.trim().length == 0) {\r\n            return\r\n        }\r\n        const newFmt = { ...frontMatter }\r\n        newFmt[inputFmtKeyValue] = inputFmtValueValue\r\n        onChange(newFmt)\r\n    }\r\n\r\n    const addFrontMatter = () => {\r\n        return (\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <Space>\r\n                    <Input style={{ flex: 1 }} placeholder=\"frontMatter Key\" value={inputFmtKeyValue} onChange={(v) => setInputFmtKeyValue(v.target.value)} onPressEnter={onInputEnterKeyPress} />\r\n                    <Input style={{ flex: 1 }} placeholder=\"frontMatter value\" value={inputFmtValueValue} onChange={(v) => setInputFmtValueValue(v.target.value)} onPressEnter={onInputEnterKeyPress} />\r\n                    <Button type='default' onClick={() => {\r\n                        setLocalVisible(false)\r\n                        onClose()\r\n                    }}>X</Button>\r\n                </Space>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        localVisible &&\r\n        <Card title={title} bordered={true} hoverable={true} style={{ position: 'absolute', top: '100%', zIndex: 100, width: '600px' }} extra={addFrontMatter()}>\r\n            {exitsFontMatter()}\r\n        </Card>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { TagAdder } from \"./tagAdder\";\r\nimport { FrontMatterAdder } from \"../../components/frontMatterAdder\";\r\nimport { Button, Checkbox, Col, Modal, Row, Space, Tag, Tooltip } from \"antd\";\r\n\r\n\r\nconst CheckboxGroup = Checkbox.Group\r\n\r\nexport function PostSettings({ visible, setVisible, tagCatMeta, setTagCatMeta, postMeta, setPostMeta, handleChange }) {\r\n    // 添加标签使用的状态\r\n    const [tagOpenStat, setTagOpenStat] = useState(false)\r\n    const [originTags, setOriginTags] = useState([])\r\n    const [catOpenStat, setCatOpenStat] = useState(false)\r\n    const [originCats, setOriginCats] = useState([])\r\n    const [fmOpenStat, setFmOpenStat] = useState(false)\r\n    const [originFms, setOriginFms] = useState([])\r\n\r\n\r\n    const tagClose = (v) => {\r\n        const newTags = postMeta.tags.filter(item => item !== v)\r\n        const meta = { ...postMeta, tags: newTags }\r\n        setPostMeta(meta)\r\n    }\r\n\r\n    const catClose = (v) => {\r\n        const newCats = postMeta.categories.filter(item => item !== v)\r\n        const meta = { ...postMeta, categories: newCats }\r\n        setPostMeta(meta)\r\n    }\r\n\r\n    const fmtClose = (v) => {\r\n        const newfmt = {}\r\n        Object.keys(postMeta.frontMatter).forEach(key => {\r\n            if (key === v) {\r\n                return\r\n            }\r\n            newfmt[key] = postMeta.frontMatter[key]\r\n        })\r\n        const meta = { ...postMeta, frontMatter: newfmt }\r\n        setPostMeta(meta)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title={\r\n                <div style={{ textAlign: 'left' }}>\r\n                    文章属性\r\n                </div>\r\n            }\r\n            visible={visible}\r\n            onCancel={() => {\r\n                setVisible(false);\r\n                console.log('cancel', originFms)\r\n                setPostMeta({ ...postMeta, tags: originTags, categories: originCats, frontMatter: originFms })\r\n            }}\r\n            onOk={() => {\r\n                setVisible(false);\r\n                handleChange({ tags: postMeta.tags, categories: postMeta.categories, frontMatter: postMeta.frontMatter })\r\n            }}\r\n            afterOpenChange={() => {\r\n                setOriginTags(postMeta.tags)\r\n                setOriginCats(postMeta.categories)\r\n                setOriginFms(postMeta.frontMatter)\r\n            }}\r\n            style={{ width: 800 }}\r\n        >\r\n            <Row>\r\n                <Col>\r\n                </Col>\r\n                <Col >\r\n                    <Space style={{ width: '100', flexWrap: 'wrap' }}>\r\n                        {\r\n                            // 循环填充当前已有的标签\r\n                            postMeta.tags.map((item) => {\r\n                                return <Tag key={item} closable onClose={() => tagClose(item)} color=\"blue\" style={{ marginBottom: 5 }}>{item}</Tag>\r\n                            })\r\n                        }\r\n                        <Button type='dashed' onClick={() => {\r\n                            setTagOpenStat(!tagOpenStat)\r\n                            setCatOpenStat(false)\r\n                            setFmOpenStat(false)\r\n                        }}>+添加标签</Button>\r\n                    </Space>\r\n                    {/* todo 打开添加标签的界面 */}\r\n                    {\r\n                        <TagAdder existTags={tagCatMeta.tags} tags={postMeta.tags} onchange={(v) => {\r\n                            const meta = { ...postMeta, tags: v }\r\n                            console.log(v)\r\n                            setPostMeta(meta)\r\n                        }} visible={tagOpenStat} cardTitle={'标签'} placeholder={'请输入标签...'} onClose={() => setTagOpenStat(false)} />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 15, marginBottom: 15 }}>\r\n                <Col>\r\n                    <Space style={{ width: '100', flexWrap: 'wrap' }}>\r\n                        {\r\n                            postMeta.categories.map((item) => {\r\n                                return <Tag key={item} color=\"blue\" style={{ marginBottom: 5 }} closable onClose={() => catClose(item)}>{item}</Tag>\r\n                            })\r\n                        }\r\n                        <Button type='dashed' onClick={() => {\r\n                            setCatOpenStat(!catOpenStat)\r\n                            setFmOpenStat(false)\r\n                            setTagOpenStat(false)\r\n                        }}>+添加分类</Button>\r\n                    </Space>\r\n                    {\r\n                        /* todo 打开添加标签的界面 */\r\n                        <TagAdder existTags={tagCatMeta.categories} tags={postMeta.categories} onchange={(v) => {\r\n                            const meta = { ...postMeta, categories: v }\r\n                            setPostMeta(meta)\r\n                        }} visible={catOpenStat} cardTitle={'分类'} placeholder={'请输入分类...'} onClose={() => setCatOpenStat(false)} />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 15, marginBottom: 15 }}>\r\n                <Col>\r\n                    <Space style={{ width: '100', flexWrap: 'wrap' }}>\r\n                        {\r\n                            /* 遍历渲染已有的fontMatter */\r\n                            Object.keys(postMeta.frontMatter).map((item) => {\r\n                                return (\r\n                                    <Tooltip key={item} title={!postMeta.frontMatter[item] ? 'unset' : postMeta.frontMatter[item]}>\r\n                                        <Tag closable onClose={() => fmtClose(item)} key={item} color=\"blue\" style={{ marginBottom: 5 }}>{item}</Tag>\r\n                                    </Tooltip>\r\n\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button type='dashed'\r\n                            onClick={() => {\r\n                                setFmOpenStat(!fmOpenStat)\r\n                                setTagOpenStat(false)\r\n                                setCatOpenStat(false)\r\n                            }}\r\n                        >+自定义frontMatter</Button>\r\n                    </Space>\r\n\r\n                    {\r\n                        /* todo 打开添加标签的界面 */\r\n                        <FrontMatterAdder existFrontMatter={originFms} onClose={() => { setFmOpenStat(false) }} visible={fmOpenStat} title={'Font-Matter'} frontMatter={postMeta.frontMatter} onChange={\r\n                            (v) => {\r\n                                const meta = { ...postMeta, frontMatter: v }\r\n                                setPostMeta(meta)\r\n                            }\r\n                        } />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Modal>\r\n    )\r\n}","import { Button, Card, Checkbox, Input, Space, Tag } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\nconst CheckboxGroup = Checkbox.Group\r\n\r\nexport function TagAdder({ existTags, tags, onchange, onClose, visible, cardTitle, placeholder }) {\r\n\r\n    const [tagInputValue, setTagInputValue] = useState('')\r\n    const [localVisible, setLocalVisible] = useState(visible)\r\n\r\n    useEffect(() => {\r\n        // 当外部的 visible 发生变化时，同步更新本地的状态\r\n        setLocalVisible(visible);\r\n    }, [visible]);\r\n\r\n    const addNewTag = (v) => {\r\n        const inputValue = v.target.value\r\n        if (inputValue.trim() == '') {\r\n            setTagInputValue('')\r\n            return\r\n        }\r\n        const tagSet = new Set(tags)\r\n        tagSet.add(inputValue)\r\n        onchange(Array.from(tagSet))\r\n        setTagInputValue('')\r\n    }\r\n\r\n\r\n    function tagModified() {\r\n        const options = []\r\n        Object.keys(existTags).forEach((name) => {\r\n            options.push(existTags[name])\r\n        })\r\n        return (\r\n            <CheckboxGroup\r\n                options={options.map((item, i) => ({\r\n                    label: (\r\n                        <Tag color={tags.includes(item) ? 'purple' : ''} style={{ marginBottom: 5 }}>\r\n                            {item}\r\n                        </Tag>\r\n                    ),\r\n                    value: item\r\n                }))}\r\n                value={tags}\r\n                onChange={(v) => { onchange(v) }}\r\n            />\r\n        )\r\n    }\r\n\r\n    function addTag() {\r\n        return (\r\n            <div style={{ width: '100%', display: 'flex' }}>\r\n                <Input\r\n                    style={{ flex: 1 }}\r\n                    placeholder={placeholder}\r\n                    value={tagInputValue}\r\n                    onChange={(v) => setTagInputValue(v.target.value)}\r\n                    onPressEnter={(v) => { addNewTag(v) }}\r\n                />\r\n                <Button\r\n                    type=\"default\"\r\n                    style={{ marginLeft: '5px' }}\r\n                    onClick={() => {\r\n                        setLocalVisible(!visible)\r\n                        onClose()\r\n                    }}\r\n                >\r\n                    X\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        localVisible &&\r\n        <Card\r\n            title={cardTitle}\r\n            bordered={true}\r\n            hoverable={true}\r\n            style={{ position: 'absolute', zIndex: 999, width: '350px' }}\r\n            extra={addTag()}\r\n        >\r\n            <div style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n                {tagModified()}\r\n            </div>\r\n        </Card>\r\n    )\r\n}"],"names":["CheckboxGroup","Checkbox","Group","FrontMatterAdder","_ref","visible","onClose","title","existFrontMatter","frontMatter","onChange","_useState2","_slicedToArray","useState","localVisible","setLocalVisible","_useState4","inputFmtKeyValue","setInputFmtKeyValue","_useState6","inputFmtValueValue","setInputFmtValueValue","useEffect","exitsFontMatter","fmkeys","Object","keys","React","v","newfmt","forEach","name","value","map","item","i","key","_ref2","checked","Tooltip","Tag","color","style","marginBottom","onInputEnterKeyPress","trim","length","newFmt","_objectSpread","Card","bordered","hoverable","position","top","zIndex","width","extra","display","alignItems","Space","Input","flex","placeholder","target","onPressEnter","Button","type","onClick","PostSettings","setVisible","tagCatMeta","postMeta","setTagCatMeta","setPostMeta","handleChange","tagOpenStat","setTagOpenStat","originTags","setOriginTags","catOpenStat","setCatOpenStat","_useState8","originCats","setOriginCats","_useState10","fmOpenStat","setFmOpenStat","_useState12","originFms","setOriginFms","Modal","textAlign","onCancel","console","log","tags","categories","onOk","afterOpenChange","Row","Col","flexWrap","closable","newTags","filter","meta","TagAdder","existTags","onchange","cardTitle","marginTop","newCats","fmtClose","tagInputValue","setTagInputValue","options","inputValue","tagSet","Set","add","Array","from","addNewTag","marginLeft","maxHeight","overflowY","push","label","includes"],"sourceRoot":""}