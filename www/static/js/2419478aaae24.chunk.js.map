{"version":3,"file":"static/js/2419478aaae24.chunk.js","mappings":"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","sources":["webpack://hexo-pro/./client/src/components/Vditor/index.tsx","webpack://hexo-pro/./client/src/pages/content/components/EditorHeader.tsx","webpack://hexo-pro/./client/src/pages/content/posts/post/index.tsx","webpack://hexo-pro/./client/src/pages/content/style/index.module.less"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport Vditor from 'vditor';\r\nimport \"vditor/src/assets/less/index.less\"\r\nimport \"./style/index.less\"\r\nimport service from '@/utils/api';\r\n\r\nexport default function HexoProVditor({ initValue, handleChangeContent, handleUploadingImage }) {\r\n\r\n    // 'emoji', 'headings', 'bold', 'italic', 'strike', '|', 'line', 'quote', 'list', 'ordered-list', 'check', 'outdent', 'indent', 'code', 'inline-code', 'insert-after', 'insert-before', 'undo', 'redo', 'upload', 'link', 'table', 'edit-mode', 'preview', 'fullscreen', 'outline', 'export'\r\n\r\n    function uploadImage(image, filename) {\r\n        const promise = new Promise((f, r) => {\r\n            service.post('/hexopro/api/images/upload', { data: image, filename: filename }).then(res => {\r\n                // console.log('image upload resp', res)\r\n                f(res.data)\r\n            }).catch(err => {\r\n                r(err)\r\n            })\r\n        })\r\n        return promise\r\n    }\r\n\r\n\r\n    const [vd, setVd] = useState(undefined);\r\n    const [isUploadingImage, setIsUPloadingImage] = useState(false)\r\n\r\n    const [isEditorFocus, setIsEditorFocus] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        handleUploadingImage(isUploadingImage)\r\n        return () => {\r\n            setIsUPloadingImage(undefined)\r\n        }\r\n    }, [isUploadingImage])\r\n\r\n\r\n    useEffect(() => {\r\n        const vditor = new Vditor('vditor', {\r\n            theme: 'classic',\r\n            height: '100%',\r\n            width: '100%',\r\n            toolbarConfig: {\r\n                pin: false // 确保工具栏固定\r\n            },\r\n            after: () => {\r\n                // 设置初始值\r\n                vditor.setValue(initValue)\r\n\r\n                // 固定toolbar\r\n                const toolbar = document.querySelector('.vditor-toolbar') as HTMLElement;\r\n                const vditorElement = document.getElementById('vditor') as HTMLElement;\r\n                if (toolbar && vditorElement) {\r\n                    toolbar.style.width = `${vditorElement.clientWidth}px`;\r\n                }\r\n\r\n                const content = document.querySelector('vditor-content') as HTMLElement;\r\n                const editorHeader = document.querySelector('.editor-header') as HTMLElement;\r\n                console.log('editorHeader', editorHeader)\r\n                console.log(\"content\", content)\r\n                if (content && toolbar && editorHeader) {\r\n                    console.log('走到这里了')\r\n                    content.style.cssText = `margin-top: ${toolbar.clientHeight + editorHeader.clientHeight}px !important;`;\r\n                }\r\n\r\n                window.addEventListener('resize', () => {\r\n                    if (toolbar && vditorElement) {\r\n                        toolbar.style.width = `${vditorElement.clientWidth}px`;\r\n                        if (content) {\r\n                            content.style.marginTop = `${toolbar.clientHeight + editorHeader.clientHeight}px !important;`;\r\n                        }\r\n                    }\r\n                });\r\n                // const vditorElement = document.querySelector('#vditor > div.vditor-content > div.vditor-ir > pre');\r\n                // console.log(vditorElement)\r\n                // if (vditorElement) {\r\n                //     vditorElement.addEventListener('focus', () => {\r\n                //         console.log('Vditor 编辑器已获得焦点1');\r\n                //     }, true);\r\n                //     vditorElement.addEventListener('blur', () => {\r\n                //         console.log('Vditor 编辑器失去焦点');\r\n                //     }, true);\r\n                // }\r\n            },\r\n            focus: (v: string) => {\r\n                setIsEditorFocus(true)\r\n            },\r\n            blur: (v) => {\r\n                setIsEditorFocus(false)\r\n            },\r\n            upload: {\r\n                multiple: false,\r\n                error: (err: any) => {\r\n                    console.log('err', err)\r\n                },\r\n                validate: (files) => {\r\n                    console.log('validate', files)\r\n                    return true\r\n                },\r\n                format: (files: File[], responseText: string): string => {\r\n                    // 这里可以添加处理文件格式化的逻辑\r\n                    console.log('format', files)\r\n                    return responseText;\r\n                },\r\n                file: (files: File[]): File[] | Promise<File[]> => {\r\n                    console.log('file', files)\r\n                    return null\r\n                },\r\n                handler: (files: File[]): Promise<string | null> => {\r\n                    // 这里可以添加处理文件上传的逻辑\r\n                    console.log(files)\r\n                    for (let file of files) {\r\n                        setIsUPloadingImage(true)\r\n                        const reader = new FileReader();\r\n                        reader.onload = (event) => {\r\n                            const filename = file.name;\r\n                            uploadImage(event.target.result, filename).then((res: { src: string, msg: string }) => {\r\n                                console.log('update=> ', res)\r\n                                res['code'] = 0\r\n\r\n                                let ans = {\r\n                                    \"msg\": res.msg,\r\n                                    \"code\": 0,\r\n                                    \"data\": {\r\n                                        \"errFiles\": [],\r\n                                        \"succMap\": {\r\n                                            filename: res.src,\r\n                                        }\r\n                                    }\r\n                                }\r\n                                setTimeout(() => {\r\n                                    const currentValue = vditor.getValue();\r\n                                    const cursorPosition = vditor.getCursorPosition();\r\n                                    console.log('cursorPosition', cursorPosition)\r\n                                    if (isEditorFocus) {\r\n                                        vditor.setValue(currentValue + `\\n![alt text](${res.src})`)\r\n                                    } else {\r\n                                        vditor.insertValue(`\\n![alt text](${res.src})`)\r\n                                    }\r\n                                    // 重新渲染编辑器内容（如果需要）\r\n                                }, 300);\r\n                                return null\r\n                            }).catch((err) => {\r\n                                console.error('Image upload failed: ', err);\r\n                                return err\r\n                            }).finally(() => {\r\n                                setIsUPloadingImage(false)\r\n                            });\r\n                        };\r\n                        reader.readAsDataURL(file);\r\n                    }\r\n                    return null; // 确保函数返回一个值\r\n                }\r\n            },\r\n            input: (v) => {\r\n                handleChangeContent(vditor.getValue())\r\n            },\r\n            toolbar: [\r\n                {\r\n                    name: 'emoji'\r\n                },\r\n                {\r\n                    name: 'headings'\r\n                },\r\n                {\r\n                    name: 'bold'\r\n                },\r\n                {\r\n                    name: 'italic'\r\n                },\r\n                {\r\n                    name: 'strike'\r\n                },\r\n                {\r\n                    name: 'line'\r\n                },\r\n                {\r\n                    name: 'quote'\r\n                },\r\n                {\r\n                    name: 'list'\r\n                },\r\n                {\r\n                    name: 'ordered-list'\r\n                },\r\n                {\r\n                    name: 'check'\r\n                },\r\n                {\r\n                    name: 'outdent'\r\n                },\r\n                {\r\n                    name: 'indent'\r\n                },\r\n                {\r\n                    name: 'code'\r\n                },\r\n                {\r\n                    name: 'inline-code'\r\n                },\r\n                {\r\n                    name: 'inline-code'\r\n                },\r\n                {\r\n                    name: 'insert-after'\r\n                },\r\n                {\r\n                    name: 'insert-before'\r\n                },\r\n                {\r\n                    name: 'undo'\r\n                },\r\n                {\r\n                    name: 'redo'\r\n                },\r\n                {\r\n                    name: 'upload'\r\n                },\r\n                {\r\n                    name: 'link'\r\n                },\r\n                {\r\n                    name: 'table'\r\n                },\r\n                {\r\n                    name: 'edit-mode',\r\n                },\r\n                {\r\n                    name: 'preview',\r\n                    className: 'toolbar-right'\r\n                },\r\n                {\r\n                    name: 'fullscreen',\r\n                    className: 'toolbar-right'\r\n                },\r\n                {\r\n                    name: 'outline',\r\n                    className: 'toolbar-right'\r\n                },\r\n                {\r\n                    name: 'export',\r\n                    className: 'toolbar-right'\r\n                }\r\n            ]\r\n        });\r\n\r\n\r\n        return () => {\r\n            vd?.destroy();\r\n            setVd(undefined);\r\n        }\r\n    }, [initValue]);\r\n    return (\r\n        <div id='vditorWapper' style={{ width: '100%', height: '100%', flex: 1, backgroundColor: 'blue', borderRadius: '0px' }}>\r\n            <div\r\n                style={{ width: '100%', height: '100%' }}\r\n                id='vditor'\r\n                className='vditor'>\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}","import { BarsOutlined, DeleteOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, message, Popconfirm, Row } from \"antd\";\r\nimport ButtonGroup from \"antd/es/button/button-group\";\r\nimport React, { useState } from \"react\";\r\nimport cs from 'classnames';\r\n\r\nexport default function EditorHeader({ initTitle, isPage, isDraft, popTitle, popDes, className = '', handleChangeTitle, handleSettingClick, handleRemoveSource, handlePublish }) {\r\n\r\n    return (\r\n        <Row style={{ width: \"100%\", borderBottomColor: 'black', borderBottom: '1px solid gray', backgroundColor: 'white' }} align='middle' className={cs(\"editor-header\", className)}>\r\n            {/* 博客名称输入 */}\r\n            <Col span={12}>\r\n                <input\r\n                    style={{ width: \"100%\", height: 60, border: 'none', outline: 'none', boxSizing: 'border-box', fontSize: 28, fontWeight: 500, marginLeft: 10 }}\r\n                    value={initTitle}\r\n                    onChange={(v) => {\r\n                        handleChangeTitle(v.target.value)\r\n                    }}\r\n                />\r\n            </Col>\r\n            {/* 博客发布按钮 */}\r\n            <Col span={2} offset={9} style={{ alignItems: 'center', justifyContent: 'center', paddingLeft: 50 }}>\r\n                <ButtonGroup>\r\n                    <Button type='default' icon={<SettingOutlined />} onClick={(e) => handleSettingClick(e)} />\r\n                    {\r\n                        isDraft && !isPage ?\r\n                            <Button type='primary' onClick={handlePublish}>发布博客</Button>\r\n                            : <Button type='default' onClick={handlePublish}>转为草稿</Button>\r\n                    }\r\n                    <Popconfirm\r\n                        title={popTitle}\r\n                        description={popDes}\r\n                        onConfirm={() => {\r\n                            message.info({\r\n                                content: 'ok',\r\n                            });\r\n                            handleRemoveSource()\r\n                        }}\r\n                        onCancel={() => {\r\n                            message.error({\r\n                                content: 'cancel',\r\n                            });\r\n                        }}\r\n                    >\r\n                        <Button type='default' icon={<DeleteOutlined />} />\r\n                    </Popconfirm>\r\n                </ButtonGroup>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}","import { service } from '@/utils/api';\r\nimport React, { useEffect, useRef, useState, createElement, Fragment, ReactNode } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Button, Col, message, Popconfirm, Row } from 'antd'\r\nimport IconSort from '../../../../assets/sort.svg'\r\nimport _ from 'lodash';\r\nimport { PostSettings } from './postSetting';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BarsOutlined, DeleteOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport HexoProVditor from '@/components/Vditor';\r\nimport EditorHeader from '../../components/EditorHeader';\r\nimport useLocale from '@/hooks/useLocale';\r\nimport styles from '../../style/index.module.less'\r\n\r\n\r\nconst ButtonGroup = Button.Group;\r\n\r\ntype Post = {\r\n    isDraft: boolean\r\n    source: string\r\n}\r\n\r\nfunction Post() {\r\n    const navigate = useNavigate();\r\n    const postRef = useRef(null);\r\n    const { _id } = useParams();\r\n    const [post, setPost] = useState({ isDraft: true, source: null });\r\n    const [tagsCatMeta, setTagsCatMeta] = useState({})\r\n    const [postMetaData, setPostMetadata] = useState({ tags: [], categories: [], frontMatter: {} })\r\n    const [doc, setDoc] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [initialRaw, setInitialRaw] = useState('');\r\n    const [rendered, setRendered] = useState('');\r\n    const [update, setUpdate] = useState({});\r\n    const [visible, setVisible] = useState(false)\r\n    const [lineNumber, setLineNumber] = useState(false)\r\n    const [enableAutoStrol, setEnableAutoStroll] = useState(false)\r\n    const t = useLocale()\r\n\r\n    const queryPostById = (_id) => {\r\n        return new Promise((resolve, reject) => {\r\n            service.get('/hexopro/api/posts/' + _id).then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    const tagsCategoriesAndMetadata = () => {\r\n        return new Promise((resolve, reject) => {\r\n            service.get('/hexopro/api/tags-categories-and-metadata').then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    const postMeta = () => {\r\n        return new Promise((resolve, reject) => {\r\n            service.get('/hexopro/api/postMeta/' + _id).then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    const settings = () => {\r\n        return new Promise((resolve, reject) => {\r\n            service.get('/hexopro/api/settings/list').then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    const fetch = () => {\r\n        return {\r\n            post: queryPostById(_id),\r\n            tagsCategoriesAndMetadata: tagsCategoriesAndMetadata(),\r\n            settings: settings(),\r\n            postMeta: postMeta()\r\n        }\r\n    }\r\n\r\n    const dataDidLoad = (name, data) => {\r\n        if (name == 'postMeta') {\r\n            setPostMetadata(data)\r\n            return\r\n        }\r\n        if (name == 'tagsCategoriesAndMetadata') {\r\n            setTagsCatMeta(data)\r\n            return\r\n        }\r\n        if (name == 'post') {\r\n            // console.log('dataLoad', data)\r\n            const parts = data.raw.split('---')\r\n            const _slice = parts[0] === '' ? 2 : 1;\r\n            const raw = parts.slice(_slice).join('---').trim();\r\n            setTitle(data.title)\r\n            setInitialRaw(raw)\r\n            setRendered(raw)\r\n            setPost(data)\r\n        }\r\n    }\r\n\r\n    const handleChange = (update) => {\r\n        console.log('update', update)\r\n        // var now = moment()\r\n        const promise = new Promise((resolve, reject) => {\r\n            service.post('/hexopro/api/posts/' + _id, update).then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n        return promise\r\n    }\r\n\r\n    const handleChangeTitle = (e) => {\r\n        if (e.target.value == title) {\r\n            return\r\n        }\r\n        setTitle(e.target.value)\r\n        console.log(post.source)\r\n        const parts = post.source.split('/')\r\n        parts[parts.length - 1] = e.target.value + '.md'\r\n        const newSource = parts.join('/')\r\n        postRef.current({ title: e.target.value, source: newSource })\r\n    }\r\n\r\n    const handleChangeContent = (text) => {\r\n        if (text === rendered) {\r\n            return\r\n        }\r\n        setRendered(text)\r\n        postRef.current({ _content: text })\r\n    }\r\n\r\n    const removeBlog = () => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            service.get('/hexopro/api/posts/' + _id + '/remove').then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n        if (post.isDraft) {\r\n            navigate(`/posts/drafts`);\r\n        } else {\r\n            navigate(`/posts/blogs`);\r\n        }\r\n    }\r\n\r\n    const publish = () => {\r\n        const res = handlePublish()\r\n        res.then((data: Post) => {\r\n            setPost(data)\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const handlePublish = () => {\r\n        if (!post.isDraft) {\r\n            return\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            console.log('publish blog')\r\n            service.post('/hexopro/api/posts/' + _id + '/publish').then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    const unpublish = () => {\r\n        const res = handleUnpublish()\r\n        res.then((data: Post) => {\r\n            setPost(data)\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const handleUnpublish = () => {\r\n        if (post.isDraft) {\r\n            return\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            console.log('unpublish blog')\r\n            service.post('/hexopro/api/posts/' + _id + '/unpublish').then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleUpdate = (update) => {\r\n        console.log(update)\r\n        return new Promise((resolve, reject) => {\r\n            service.post('/hexopro/api/posts/' + _id, update).then((res) => {\r\n                resolve(res.data)\r\n            }).catch(err => {\r\n                reject(err)\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleUploadingImage = (isUploading: boolean) => {\r\n        console.log('handleUploadingImage', isUploading)\r\n    }\r\n\r\n    useEffect(() => {\r\n        queryPostById(_id).then((res) => {\r\n            if (typeof res === 'object' && res != null && '_content' in res) {\r\n                const content = (res as { _content: string })._content;\r\n                setDoc(content)\r\n            }\r\n        }).catch(err => {\r\n            setDoc(err)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const items = fetch()\r\n        Object.keys(items).forEach((name) => {\r\n            Promise.resolve(items[name]).then((data) => {\r\n                const update = {}\r\n                update[name] = data\r\n                setUpdate(update)\r\n                if (dataDidLoad) {\r\n                    dataDidLoad(name, data)\r\n                }\r\n            })\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const p = _.debounce((update) => {\r\n            handleUpdate(update)\r\n        }, 1000, { trailing: true, loading: true });\r\n        postRef.current = p\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", flexDirection: \"column\", backgroundColor: 'blue', overflowY: 'auto' }}>\r\n            <EditorHeader\r\n                isPage={false}\r\n                isDraft={post.isDraft}\r\n                handlePublish={publish}\r\n                className={styles['editor-header']}\r\n                initTitle={title}\r\n                popTitle={t['editor.header.pop.title']}\r\n                popDes={t['page.editor.header.pop.des']}\r\n                handleChangeTitle={handleChangeTitle}\r\n                handleSettingClick={(v) => setVisible(true)}\r\n                handleRemoveSource={removeBlog}\r\n            />\r\n            <div style={{ backgroundColor: 'red', width: \"100%\", flex: 1, padding: 0, border: 'none' }}>\r\n                <HexoProVditor initValue={doc} handleChangeContent={handleChangeContent} handleUploadingImage={handleUploadingImage} />\r\n            </div>\r\n            <PostSettings\r\n                visible={visible}\r\n                setVisible={setVisible}\r\n                tagCatMeta={tagsCatMeta}\r\n                setTagCatMeta={setTagsCatMeta}\r\n                postMeta={postMetaData}\r\n                setPostMeta={setPostMetadata}\r\n                handleChange={handleChange}\r\n            />\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Post","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["HexoProVditor","_ref","initValue","handleChangeContent","handleUploadingImage","_useState2","_slicedToArray","useState","undefined","vd","setVd","_useState4","isUploadingImage","setIsUPloadingImage","_useState6","isEditorFocus","setIsEditorFocus","useEffect","vditor","Vditor","theme","height","width","toolbarConfig","pin","after","setValue","toolbar","document","querySelector","vditorElement","getElementById","style","concat","clientWidth","content","editorHeader","console","log","cssText","clientHeight","window","addEventListener","marginTop","focus","v","blur","upload","multiple","error","err","validate","files","format","responseText","file","handler","_step","_iterator","_createForOfIteratorHelper","_loop","value","reader","FileReader","onload","event","filename","name","image","Promise","f","r","service","data","then","res","uploadImage","target","result","msg","src","setTimeout","currentValue","getValue","cursorPosition","getCursorPosition","insertValue","readAsDataURL","s","n","done","e","input","className","destroy","React","id","flex","backgroundColor","borderRadius","EditorHeader","initTitle","isPage","isDraft","popTitle","popDes","_ref$className","handleChangeTitle","handleSettingClick","handleRemoveSource","handlePublish","Row","borderBottomColor","borderBottom","align","cs","Col","span","border","outline","boxSizing","fontSize","fontWeight","marginLeft","onChange","offset","alignItems","justifyContent","paddingLeft","ButtonGroup","Button","type","icon","SettingOutlined","onClick","Popconfirm","title","description","onConfirm","message","info","onCancel","DeleteOutlined","Group","navigate","useNavigate","postRef","useRef","_id","useParams","source","post","setPost","tagsCatMeta","setTagsCatMeta","tags","categories","frontMatter","postMetaData","setPostMetadata","_useState8","doc","setDoc","_useState10","setTitle","_useState12","setInitialRaw","_useState14","rendered","setRendered","_useState16","setUpdate","_useState18","visible","setVisible","_useState20","_useState22","t","useLocale","queryPostById","resolve","reject","get","dataDidLoad","parts","raw","split","_slice","slice","join","trim","_typeof","_content","items","tagsCategoriesAndMetadata","settings","postMeta","Object","keys","forEach","update","p","_","handleUpdate","trailing","loading","current","display","flexDirection","overflowY","styles","length","newSource","padding","text","isUploading","PostSettings","tagCatMeta","setTagCatMeta","setPostMeta","handleChange"],"sourceRoot":""}