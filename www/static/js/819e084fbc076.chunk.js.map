{"version":3,"file":"static/js/819e084fbc076.chunk.js","mappings":"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","sources":["webpack://hexo-pro-client/./node_modules/antd/es/col/index.js","webpack://hexo-pro-client/./node_modules/antd/es/row/index.js","webpack://hexo-pro-client/./client/src/pages/content/components/frontMatterAdder.tsx","webpack://hexo-pro-client/./client/src/pages/content/pages/page/pageSettings.tsx"],"sourcesContent":["\"use client\";\n\nimport { Col } from '../grid';\nexport default Col;","\"use client\";\n\nimport { Row } from '../grid';\nexport default Row;","import { Button, Card, Checkbox, Input, Space, Tag, Tooltip } from \"antd\"\r\nimport React from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nconst CheckboxGroup = Checkbox.Group\r\n\r\nexport function FrontMatterAdder({ visible, onClose, title, existFrontMatter, frontMatter, onChange }) {\r\n    const [localVisible, setLocalVisible] = useState(false)\r\n    const [inputFmtKeyValue, setInputFmtKeyValue] = useState('')\r\n    const [inputFmtValueValue, setInputFmtValueValue] = useState('')\r\n\r\n    useEffect(() => {\r\n        setLocalVisible(visible)\r\n    }, [visible])\r\n\r\n    const exitsFontMatter = () => {\r\n        const fmkeys = Object.keys(existFrontMatter)\r\n        const options = []\r\n\r\n        fmkeys.forEach((name, i) => {\r\n            options.push({\r\n                label: (\r\n                    <Tooltip key={i} title={!frontMatter[name] ? 'unset' : frontMatter[name]}>\r\n                        <Tag color={!frontMatter[name] ? 'default' : 'blue'}>{name}</Tag>\r\n                    </Tooltip>\r\n                ),\r\n                value: name\r\n            })\r\n        })\r\n\r\n        return (\r\n            <CheckboxGroup options={options} defaultValue={fmkeys} onChange={(v) => {\r\n                const newfmt = {}\r\n                v.forEach(name => {\r\n                    newfmt[name] = !existFrontMatter[name] ? null : existFrontMatter[name]\r\n                })\r\n                console.log('newfmt', newfmt)\r\n                onChange(newfmt)\r\n            }} />\r\n        )\r\n    }\r\n\r\n    const onInputEnterKeyPress = () => {\r\n        if (inputFmtKeyValue.trim().length == 0) {\r\n            return\r\n        }\r\n        const newFmt = { ...frontMatter }\r\n        newFmt[inputFmtKeyValue] = inputFmtValueValue\r\n        onChange(newFmt)\r\n    }\r\n\r\n    const addFrontMatter = () => {\r\n        return (\r\n            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                <Space>\r\n                    <Input style={{ flex: 1 }} placeholder=\"frontMatter Key\" value={inputFmtKeyValue} onChange={(v) => setInputFmtKeyValue(v.target.value)} onPressEnter={onInputEnterKeyPress} />\r\n                    <Input style={{ flex: 1 }} placeholder=\"frontMatter value\" value={inputFmtValueValue} onChange={(v) => setInputFmtValueValue(v.target.value)} onPressEnter={onInputEnterKeyPress} />\r\n                    <Button type='default' onClick={() => {\r\n                        setLocalVisible(false)\r\n                        onClose()\r\n                    }}>X</Button>\r\n                </Space>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        localVisible &&\r\n        <Card title={title} bordered={true} hoverable={true} style={{ position: 'absolute', top: '100%', zIndex: 100, width: '600px' }} extra={addFrontMatter()}>\r\n            {exitsFontMatter()}\r\n        </Card>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { post } from \"@/utils/api\"\r\nimport { Button, Col, Input, message, Modal, Row, Space, Tag, Tooltip } from \"antd\"\r\nimport { FrontMatterAdder } from \"../../components/frontMatterAdder\"\r\n\r\nexport function PageSettings({ visible, setVisible, pageMeta, setPageMeta, handleChange }) {\r\n    // 添加使用的状态\r\n    const [fmOpenStat, setFmOpenStat] = useState(false)\r\n    const [originFms, setOriginFms] = useState([])\r\n\r\n    const fmtClose = (v) => {\r\n        const newfmt = {}\r\n        Object.keys(pageMeta.frontMatter).forEach(key => {\r\n            if (key === v) {\r\n                return\r\n            }\r\n            newfmt[key] = pageMeta.frontMatter[key]\r\n        })\r\n        const meta = { ...pageMeta, frontMatter: newfmt }\r\n        setPageMeta(meta)\r\n    }\r\n\r\n    function isPathValid(path) {\r\n        // 匹配以.md为扩展名的文件名，并且路径只包含合法字符（字母、数字、斜杠、下划线和短横线）\r\n        const regex = /^([a-zA-Z0-9-_\\/]+)\\/([a-zA-Z0-9-_]+\\.md)$/i // i标志表示不区分大小写\r\n        return regex.test(path)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title={\r\n                <div style={{ textAlign: 'left' }}>\r\n                    文章属性\r\n                </div>\r\n            }\r\n            visible={visible}\r\n            onCancel={() => {\r\n                setPageMeta({ ...pageMeta, tags: [], categories: [], frontMatter: originFms })\r\n                setVisible(false)\r\n            }}\r\n            onOk={() => {\r\n                if (!isPathValid(pageMeta.source)) {\r\n                    message.error('配置的页面路径非法请检查！')\r\n                } else {\r\n                    setVisible(false)\r\n                    handleChange({ frontMatter: pageMeta.frontMatter, source: pageMeta.source })\r\n                }\r\n            }}\r\n            afterOpenChange={() => {\r\n                setOriginFms(pageMeta.frontMatter)\r\n            }}\r\n            style={{ width: 800 }}\r\n        >\r\n            <Row style={{ marginTop: 15, marginBottom: 15 }}>\r\n                <Col>\r\n                    <Space style={{ width: '100', flexWrap: 'wrap' }}>\r\n                        {\r\n                            /* 遍历渲染已有的fontMatter */\r\n                            Object.keys(pageMeta.frontMatter).map((item) => {\r\n                                return (\r\n                                    <Tooltip key={item} title={!pageMeta.frontMatter[item] ? 'unset' : pageMeta.frontMatter[item]}>\r\n                                        <Tag closable onClose={() => fmtClose(item)} key={item} color=\"blue\" style={{ marginBottom: 5 }}>{item}</Tag>\r\n                                    </Tooltip>\r\n\r\n                                )\r\n                            })\r\n                        }\r\n                        <Button type='dashed'\r\n                            onClick={() => {\r\n                                setFmOpenStat(!fmOpenStat)\r\n                            }}\r\n                        >+自定义frontMatter</Button>\r\n                    </Space>\r\n\r\n                    {\r\n                        /* todo 打开添加标签的界面 */\r\n                        <FrontMatterAdder existFrontMatter={originFms} onClose={() => { setFmOpenStat(false) }} visible={fmOpenStat} title={'Font-Matter'} frontMatter={pageMeta.frontMatter} onChange={\r\n                            (v) => {\r\n                                const meta = { ...pageMeta, frontMatter: v }\r\n                                setPageMeta(meta)\r\n                            }\r\n                        } />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 15, marginBottom: 15 }}>\r\n                <Col>\r\n                    <Input style={{ width: 350 }} allowClear placeholder='请输入页面存放路径' value={pageMeta.source} onChange={(v) => {\r\n                        const newMeta = { ...pageMeta, source: v }\r\n                        setPageMeta(newMeta)\r\n                    }} />\r\n                </Col>\r\n            </Row>\r\n        </Modal>\r\n    )\r\n}"],"names":["CheckboxGroup","Checkbox","Group","FrontMatterAdder","_ref","visible","onClose","title","existFrontMatter","frontMatter","onChange","_useState2","_slicedToArray","useState","localVisible","setLocalVisible","_useState4","inputFmtKeyValue","setInputFmtKeyValue","_useState6","inputFmtValueValue","setInputFmtValueValue","useEffect","fmkeys","options","onInputEnterKeyPress","trim","length","newFmt","_objectSpread","React","Card","bordered","hoverable","style","position","top","zIndex","width","extra","display","alignItems","Space","Input","flex","placeholder","value","v","target","onPressEnter","Button","type","onClick","Object","keys","forEach","name","i","push","label","Tooltip","key","Tag","color","defaultValue","newfmt","console","log","PageSettings","setVisible","pageMeta","setPageMeta","handleChange","fmOpenStat","setFmOpenStat","originFms","setOriginFms","Modal","textAlign","onCancel","tags","categories","onOk","path","source","test","message","error","afterOpenChange","Row","marginTop","marginBottom","Col","flexWrap","map","item","closable","meta","fmtClose","allowClear","newMeta"],"sourceRoot":""}